---
title: "Strawberries EDA"
author: "Taha Ababou"
date: "2024-10-01"
format: pdf
editor: visual
---

# Introduction

This document performs an exploratory data analysis (EDA) on the strawberries dataset. We clean the dataset, split the chemical data, and visualize key trends, such as strawberry production and pesticide use.

```{r setup, include=FALSE}
# Load necessary libraries
library(knitr)
library(kableExtra)
library(tidyverse)
library(ggplot2)

```

## Step 1: Data Cleaning

We begin by loading the dataset and exploring its structure.

```{r}
#| label: read data - glimpse 

strawberry <- read_csv("strawberries25_v3.csv", col_names = TRUE)

glimpse(strawberry)
#structure(strawberry)
```

## Step 2: Remove Single-Value Columns

We now define a function to drop columns with a single unique value across all rows, as they don't add useful information to the analysis.

```{r}
# Function to drop columns with a single unique value
drop_one_value_col <- function(df){   
  drop <- NULL  
  for(i in 1:dim(df)[2]){     
    if((df |> distinct(df[,i]) |> count()) == 1){
      drop = c(drop, i)
    } 
  }
  
  ## report the result -- names of columns dropped
  ## consider using the column content for labels 
  ## or headers 
  
  if(is.null(drop)){return("none")}else{
    print("Columns dropped:")
    print(colnames(df)[drop])
    strawberry <- df[, -1*drop]
  }
}

# Apply the function to drop unnecessary columns
strawberry <- drop_one_value_col(strawberry)

```

## Step 3: Explore Data Organization

At this point, we examine whether every row is associated with a specific state.

```{r}
# Check if every row is associated with a state
state_all <- strawberry |> distinct(State)
state_all1 <- strawberry |> group_by(State) |> count()

if(sum(state_all1$n) == dim(strawberry)[1]){print("Yes, every row in the data is associated with a state.")}


```

## Step 4: Data Cleaning

### Explore California Data

To gain better insight into the data, we explore the entries for California and see the differences between `CENSUS` and `SURVEY` programs.

```{r}
# Filter California data
calif <- strawberry |> filter(State == "CALIFORNIA")

# Split data by 'Program' (CENSUS and SURVEY)
calif_census <- calif |> filter(Program == "CENSUS")
calif_survey <- calif |> filter(Program == "SURVEY")

# Drop single-value columns in California data
drop_one_value_col(calif_census)
drop_one_value_col(calif_survey)

```

### Split the `Data Item` Column

We now clean and split composite columns for better clarity. We start with the `Data Item` column, separating it into `Fruit`, `Category`, `Item`, and `Metric`.

```{r}
# Split the 'Data Item' column into multiple columns
strawberry <- strawberry |>
  separate_wider_delim(cols = `Data Item`,
                       delim = ",",
                       names = c("Fruit", "Category", "Item", "Metric"),
                       too_many = "error",
                       too_few = "align_start")

# Trim white spaces from the newly created columns
strawberry$Category <- str_trim(strawberry$Category, side = "both")
strawberry$Item <- str_trim(strawberry$Item, side = "both")
strawberry$Metric <- str_trim(strawberry$Metric, side = "both")

```

### Exploring Fruit Column (finding hidden sub-columns)

```{r}
unique(strawberry$Fruit)

## generate a list of rows with the production and price information

spr <- which((strawberry$Fruit=="STRAWBERRIES - PRODUCTION") | (strawberry$Fruit=="STRAWBERRIES - PRICE RECEIVED"))


strw_prod_price <- strawberry |> slice(spr)


## this has the census data, too

strw_chem <- strawberry |> slice(-1*spr)  ## too soon
```

## Step 5: Splitting Chemical Data

In this step, our goal is to extract the chemical subtype, name, and code from the `Domain Category` column where applicable. The format of interest is:

**Example:**

-   Input: `"CHEMICAL, FUNGICIDE: (BACILLUS SUBTILIS = 6479)"`
-   Output:
    -   `use` = `"FUNGICIDE"`

    -   `name` = `"BACILLUS SUBTILIS"`

    -   `code` = `"6479"`

After cleaning and organizing, this data should appear in three renamed columns as:

**FUNGICIDE, BACILLUSÂ SUBTILIS, 6479.**

```{r}
# Step 1: Save the original Domain Category in another column
strawberry <- strawberry %>%
  mutate(original_domain_category = `Domain Category`)

# Step 2: Filter for rows where the Domain Category contains CHEMICAL
chemical_data <- strawberry %>%
  filter(str_detect(`Domain Category`, "CHEMICAL"))

# Step 3: Separate the Domain Category into 'type' and 'remaining'
chemical_data <- chemical_data %>%
  separate(col = `Domain Category`, into = c("type", "remaining"), sep = ", ", extra = "merge", fill = "right")

# Step 4: Further split the 'remaining' part into 'use' and 'chemical_info'
chemical_data <- chemical_data %>%
  separate(col = remaining, into = c("use", "chemical_info"), sep = ": ", extra = "merge", fill = "right")

# Step 5: Split the 'chemical_info' into 'name' and 'code'
chemical_data <- chemical_data %>%
  separate(col = chemical_info, into = c("name", "code"), sep = " = ", extra = "merge", fill = "right")

# Step 6: Clean up the 'chemical_name' and 'chemical_code' columns
chemical_data <- chemical_data %>%
  mutate(
    name = str_remove_all(name, "\\("),  # Remove '(' before chemical name
    code = str_replace_all(code, "\\(|\\)", ""),  # Remove parentheses around chemical code
    code = as.numeric(code)  # Convert chemical code to numeric
  )

# Step 7: Select relevant columns and bring back the original Domain Category
final_chemical_data <- chemical_data %>%
  select(State, Year, original_domain_category, type, use, name, code, Value)

# Step 8: View the final cleaned chemical data
glimpse(final_chemical_data)

# Saving the cleaned chemical data for future analysis
write_csv(final_chemical_data, "cleaned_chemical_data.csv")


```
